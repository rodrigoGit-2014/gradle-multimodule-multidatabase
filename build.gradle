
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0' apply false
    id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
def springCloudGcpVersion = '4.8.4'

apply from: 'dependencies.gradle'

allprojects {

    repositories {
        mavenCentral()
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation dependenciesMap.springBootWeb
        implementation dependenciesMap.lombok
        annotationProcessor dependenciesMap.lombok
        testImplementation dependenciesMap.springBootTest
    }
}

dependencyManagement {
    imports {
        mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.2.0"
    }
}

ext {
    POSTGRES = 'postgres'
    MYSQL = 'mysql'
    DATASTORE = 'datastore'
    POSTGRES_JAR = "app-${POSTGRES}-${version}.jar"
    MYSQL_JAR = "app-${MYSQL}-${version}.jar"
    DATASTORE_JAR = "app-${DATASTORE}-${version}.jar"
    repoProfile = project.hasProperty('repoProfile') ? project.getProperty('repoProfile') : ''



}


task buildPostgresJar(type: Jar){
    doFirst {
        rootProject.ext.repoProfile = POSTGRES
        project(':web').tasks.bootJar.archiveFileName.set(POSTGRES_JAR)
        project(':web').tasks.bootJar.destinationDirectory.set(layout.buildDirectory.dir("libs/postgres"))
    }
    dependsOn ':web:bootJar'
    doLast {
        println "Generated PostgreSQL JAR: ${project(':web').tasks.bootJar.archiveFileName.get()}"
    }

}

task buildMysqlJar(type: Jar) {
    doFirst {
        rootProject.ext.repoProfile  = MYSQL
        project(':web').tasks.bootJar.archiveFileName.set(MYSQL_JAR)
        project(':web').tasks.bootJar.destinationDirectory.set(layout.buildDirectory.dir("libs/mysql"))

    }
    dependsOn ':web:bootJar'

    doLast {
        println "Generated MySQL JAR: ${project(':web').tasks.bootJar.archiveFileName.get()}"
    }

}

task buildDatastoreJar(type: Jar) {
    doFirst {
        rootProject.ext.repoProfile  = DATASTORE
        project(':web').tasks.bootJar.archiveFileName.set(DATASTORE_JAR)
        project(':web').tasks.bootJar.destinationDirectory.set(layout.buildDirectory.dir("libs/datastore"))
    }
    dependsOn ':web:bootJar'

    doLast {
        println "Generated Datastire JAR: ${project(':web').tasks.bootJar.archiveFileName.get()}"
    }

}


tasks.named("clean").configure {
    dependsOn subprojects.collect { it.tasks.named("clean") }
}
